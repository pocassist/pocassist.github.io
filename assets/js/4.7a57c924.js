(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{309:function(t,s,_){t.exports=_.p+"assets/img/rule-detail.7af196e3.jpg"},310:function(t,s,_){t.exports=_.p+"assets/img/task-index.2ad09124.png"},311:function(t,s,_){t.exports=_.p+"assets/img/task-new.5d0e30f5.png"},362:function(t,s,_){t.exports=_.p+"assets/img/image-20210606161157522.42223758.png"},363:function(t,s,_){t.exports=_.p+"assets/img/rule-run.4983d322.png"},364:function(t,s,_){t.exports=_.p+"assets/img/rule-index.7f807158.jpg"},365:function(t,s,_){t.exports=_.p+"assets/img/result-detail.fd486fc6.jpg"},392:function(t,s,_){"use strict";_.r(s);var v=_(44),a=Object(v.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"整体框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#整体框架"}},[t._v("#")]),t._v(" 整体框架")]),t._v(" "),v("h2",{attrs:{id:"_0x01-想法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_0x01-想法"}},[t._v("#")]),t._v(" 0x01 想法")]),t._v(" "),v("p",[t._v("每当有新漏洞细节披露后，对于安全领域的工作者来说，通常会经过这样的一个的"),v("code",[t._v("漏洞应急生命周期")]),t._v("：")]),t._v(" "),v("p",[v("code",[t._v("漏洞复现 ----\x3e原理分析 ----\x3e poc 编写 ----\x3e 靶机验证 ----\x3e 大规模目标扫描")])]),t._v(" "),v("p",[t._v("poc 完成后，通常有多种使用场景，或是快速刷洞（时间就是money），或是赋能到公司商业化产品（工作价值）。因此要有一套标准化的 poc 框架，否则会浪费很多时间研究同一个 poc 的N种语言实现。")]),t._v(" "),v("p",[t._v("基于以上分析，我认为一款优秀的漏洞验证框架应该具备以下基础功能：")]),t._v(" "),v("ol",[v("li",[t._v("跨平台")]),t._v(" "),v("li",[t._v("可视化")]),t._v(" "),v("li",[t._v("支持高并发")]),t._v(" "),v("li",[t._v("资源（cpu / 内存）占用小")]),t._v(" "),v("li",[t._v("对于框架 poc 维护来说，应该具备：\n"),v("ul",[v("li",[t._v("poc 格式标准化，具备统一的 poc 定义规范和解析 SDK")]),t._v(" "),v("li",[t._v("不应该限制只能使用某种特定语言编写")]),t._v(" "),v("li",[t._v("poc 构建过程尽可能简单，能不写代码就不写代码")]),t._v(" "),v("li",[t._v("poc 易读，最好能可视化。")])])])]),t._v(" "),v("p",[t._v("在经过对多种流行的 poc 框架对比后发现，需要编写 python 脚本来维护 poc 的框架通常摆脱不了 python 自身的性能问题，而且不方便规则可视化，维护困难。长亭的 xray 以及 ywolf 师傅的 kunpeng，使用 yaml / json 定义 poc 是个不错的选择。经过对比发现 xray 的poc 体系更为完善，更能经得起时间的推敲，但无奈 xray 并不开源，即使维护 poc ，也无法给 poc 调用方提供 SDK。")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("因此，我决定自己实现一个poc框架。主要实现 poc管理、poc 编辑、编写过程中的靶机验证、大规模目标批量检测等等都通过前端配置就能搞定，希望帮助安全研究员们集中精力专注于 poc 的原理分析和逻辑实现，避免浪费大量时间在编写代码上。")])]),t._v(" "),v("h2",{attrs:{id:"_0x02-框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_0x02-框架"}},[t._v("#")]),t._v(" 0x02 框架")]),t._v(" "),v("p",[v("img",{attrs:{src:_(362),alt:"image-20210606161157522"}})]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("两个核心功能：")]),t._v(" "),v("ol",[v("li",[t._v("poc可视化编辑和测试")]),t._v(" "),v("li",[t._v("大规模目标批量检测")])])]),t._v(" "),v("p",[t._v("细分为：")]),t._v(" "),v("h3",{attrs:{id:"_2-1-poc-运行"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-poc-运行"}},[t._v("#")]),t._v(" 2-1 poc 运行")]),t._v(" "),v("ul",[v("li",[t._v("poc 规则体系")]),t._v(" "),v("li",[t._v("poc运行")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("poc 运行是 pocassist 框架的核心。根据 poc 规则对原始请求变形，然后获取变形后的响应，再检查响应是否匹配规则中定义的表达式")])]),t._v(" "),v("p",[v("img",{attrs:{src:_(309),alt:"rule-detail"}})]),t._v(" "),v("p",[v("img",{attrs:{src:_(363),alt:"rule-run"}})]),t._v(" "),v("h3",{attrs:{id:"_2-2-poc-管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-poc-管理"}},[t._v("#")]),t._v(" 2-2 poc 管理")]),t._v(" "),v("ul",[v("li",[t._v("poc 规则的可视化编辑：增、删、改、查、搜索、详情展示")]),t._v(" "),v("li",[t._v("配置靶机对当前编辑的 poc 规则进行验证（无需保存）")]),t._v(" "),v("li",[t._v("poc 配套的漏洞描述 和 相关组件")])]),t._v(" "),v("p",[v("img",{attrs:{src:_(364),alt:"rule-index"}})]),t._v(" "),v("h3",{attrs:{id:"_2-3-并发引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-并发引擎"}},[t._v("#")]),t._v(" 2-3 并发引擎")]),t._v(" "),v("p",[t._v("大规模目标扫描检测的核心。")]),t._v(" "),v("ul",[v("li",[t._v("自定义条件加载 poc")]),t._v(" "),v("li",[t._v("扫描任务调度")]),t._v(" "),v("li",[t._v("并发控制")]),t._v(" "),v("li",[t._v("速率控制")]),t._v(" "),v("li",[t._v("多种检测目标类型：单个url 、请求报文、url列表")]),t._v(" "),v("li",[t._v("资源控制：避免无节制的占用主机资源（内存/cpu/带宽）")]),t._v(" "),v("li",[t._v("日志：记录检测过程中所有里程碑日志、错误日志、网络请求、响应，方便回溯")])]),t._v(" "),v("h3",{attrs:{id:"_2-4-任务管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-任务管理"}},[t._v("#")]),t._v(" 2-4 任务管理")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("任务列表：任务状态、任务下发时间、任务完成时间")])]),t._v(" "),v("li",[v("p",[t._v("扫描结果展示")])])]),t._v(" "),v("p",[v("img",{attrs:{src:_(310),alt:"task-index"}})]),t._v(" "),v("p",[v("img",{attrs:{src:_(311),alt:"task-new"}})]),t._v(" "),v("p",[v("img",{attrs:{src:_(365),alt:"result-detail"}})])])}),[],!1,null,null,null);s.default=a.exports}}]);